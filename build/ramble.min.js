"use strict";
/**
 * @class S
 * Global Namespace for all Strabo Ramble related API Functions.
 * Requires [Leaflet](http://leaflet.cloudmade.com) Library
 */
var S = {
	currentResponse:null,
	currentRamble:null,
	setCurrentResponse:function(response) {
		this.currentResponse=response;
	}
};
/**
 * Namespace for Important Constants
 * @type {Object}
 */
S.Config = {
	SITE_BASE_URL: "/",
	MEDIA_URL: "/data" 
	// MEDIA_URL: "http://ns.data.api.strabo.co.s3-website-us-east-1.amazonaws.com"
};

/*********************************************** 
     Begin config.js 
***********************************************/ 

"use strict";

/*********************************************** 
     Begin util.js 
***********************************************/ 

"use strict";
/**
 * Namespace for static utility methods.
 * @type {Object}
 */
S.Util = {
	/**
	 * @method pointsToLatLngs
	 * @param  {Array} points 	An array of point objects that come from the server.
	 * @return {Array}        	An array of L.LatLng objects.
	 */
	pointsToLatLngs: function(points) {
		var results = [];
		for (var x in points) {
			results.push(new L.LatLng(points[x].coords[0], points[x].coords[1]));
		}
		return results;
	},
	/**
	 * Returns an appropriate media URL based on values in S.Config.
	 * @param  {String} token A unique identifier token.
	 * @return {String}       A mediaURL minus the file extension for the media.
	 */
	mediaURL: function(token) {
		return S.Config.MEDIA_URL + "/" + token + "/" + token;
	},
	createVideo: function(token) {
		var video = document.createElement('video');
		video.autoplay = false;
		if (video.canPlayType('video/webm')) video.src = S.Util.mediaURL(token) + ".webm";
		else if (video.canPlayType('video/mp4')) video.src = S.Util.mediaURL(token) + ".mp4";
		else if (video.canPlayType('video/ogg')) video.src = S.Util.mediaURL(token) + ".ogg";
		else video.innerHTML = S.ERROR_CANNOT_PLAY_TYPE;
		video.controls = "controls";
		return video;
	},
	createPhoto: function(token) {
		var image = document.createElement('img');
		image.src = S.Util.mediaURL(token)+".jpg";
		return image;
	},
	ERROR_CANNOT_PLAY_TYPE: "Sorry, your browser cannot play HTML5 Video. Please try using <a href='http://google.com/chrome'>Google Chrome</a> for best results",
	ERROR_NOT_VIDEO: "This method can only be called on video typed rambles.",
	ERROR_NOT_PHOTO: "This method can only be called on photo typed rambles."
};


/*********************************************** 
     Begin marker.js 
***********************************************/ 

"use strict";
/**
 * @class S.Marker
 * @extends L.Marker
 * A custom Marker for use with the Leaflet Maps that supports rotation.
 * Usage Example:
 *     var marker = new S.Marker(new L.LatLng(...));
 *     map.addLayer(marker);
 *
 * @constructor
 * Creates a new instance of a S.Marker
 * @param {L.LatLng} latlng A Latitude and Longtiude to initialize the marker at.
 * @param {Object} options An object filled with options for the Marker.
 */
S.Marker = L.Marker.extend({
	_setAngle: function() {
		if (this.options.iconAngle) {
			this._icon.style.WebkitTransition = "all .15s linear";
			this._icon.style.MozTransition = "all .15s linear";
			this._icon.style.MsTransition = "all .15s linear";
			this._icon.style.OTransition = "all .15s linear";
			this._icon.style.WebkitTransform = this._icon.style.WebkitTransform + 'translate(0px, 12px)  rotate(' + this.options.iconAngle + 'deg)';
			this._icon.style.MozTransform = 'translate(0px, 12px) rotate(' + this.options.iconAngle + 'deg)';
			this._icon.style.MsTransform = 'translate(0px, 12px) rotate(' + this.options.iconAngle + 'deg)';
			this._icon.style.OTransform = 'translate(0px, 12px) rotate(' + this.options.iconAngle + 'deg)';
		}		
	},
	_setPos: function(pos) {
		L.DomUtil.setPosition(this._icon, pos);
		if (this._shadow) {
			L.DomUtil.setPosition(this._shadow, pos);
		}
		this._setAngle();
		this._icon.style.zIndex = pos.y + this.options.zIndexOffset;
	},
	_reset: function() {
		var pos = this._map.latLngToLayerPoint(this._latlng).round();
		L.DomUtil.setPosition(this._icon, pos);
		if (this._shadow) {
			this._shadow.style.display = "none";
		}
		this._setAngle();
		this._icon.style.zIndex = pos.y;
	},
	_zoomAnimation: function(opt) {
		var pos = this._map._latLngToNewLayerPoint(this._latlng, opt.zoom, opt.center);
		this._setPos(pos);
	},
	/**
	 * @method setIconAngle
	 * Sets the rotation for the S.Marker
	 * @param {Number} iconAngle Amount to rotate the S.Marker in degrees.
	 */
	setIconAngle: function(iconAngle) {
		this.options.iconAngle = iconAngle || 0;
		if (this._map) {
			this._reset();
		}
	},
	/**
	 * @method getIconAngle
	 * Gets the rotation for the S.Marker
	 * @return {Number} Amount of rotation in the S.Marker in degrees.
	 */
	getIconAngle: function() {
		return this.options.iconAngle || 0;
	},
	/**
	 * @method setLatLng
	 * Sets the L.LatLng for the marker. Used to move a S.Marker across the map.
	 * @param {L.LatLng} latlng An L.LatLng containing the latitude and longitude of the S.Marker's destination.
	 */
	setLatLng: function(latlng) {
		this._latlng = latlng;
		this._reset();
		if (this._popup && this._popup.connected) {
			this._popup.setLatLng(latlng);
		}
	}
	/**
	 * @method bindPopup
	 * Binds a popup with a particular HTML content to a click on this marker. You can also open the bound popup with the Marker openPopup method.
	 * @param {String | HTMLElement} content The content for the popup.
	 * @param {Object} options A set of options for a popup. See [here](http://leaflet.cloudmade.com/reference.html#popup-options) for more information. 
	 */
});

/*********************************************** 
     Begin popup.js 
***********************************************/ 

"use strict";
/**
 * @class S.Popup
 * @extends L.Popup
 * @type {S.Popup}
 * A class to attach HTML to a S.Marker
 */
S.Popup = L.Popup.extend({
	connected:true,
	_initLayout: function() {
		var prefix = 'strabo-popup',
			container = this._container = L.DomUtil.create('div', prefix + ' ' + this.options.className + ' strabo-zoom-animated'),
			closeButton;
		if (this.options.closeButton) {
			closeButton = this._closeButton = L.DomUtil.create('a', prefix + '-close-button', container);
			closeButton.href = '#close';
			L.DomEvent.addListener(closeButton, 'click', this._onCloseButtonClick, this);
		}
		var wrapper = this._wrapper = L.DomUtil.create('div', prefix + '-content-wrapper', container);
		L.DomEvent.disableClickPropagation(wrapper);
		this._contentNode = L.DomUtil.create('div', prefix + '-content', wrapper);
		L.DomEvent.addListener(this._contentNode, 'mousewheel', L.DomEvent.stopPropagation);
		this._tipContainer = L.DomUtil.create('div', prefix + '-tip-container', container);
		this._tip = L.DomUtil.create('div', prefix + '-tip', this._tipContainer);
	},
	_update: function() {
		if (!this._map) {
			return;
		}
		this._container.style.visibility = 'hidden';
		this._updateLayout();
		this._updatePosition();
		this._container.style.visibility = '';
		this._adjustPan();
	}
});

S.Marker.include({
	openPopup: function() {
		if (this._popup && this._map) {
			this._popup.setLatLng(this._latlng);
			this._map.openPopup(this._popup);
		}
		return this;
	},
	closePopup: function() {
		if (this._popup) {
			this._popup._close();
		}
		return this;
	},
	bindPopup: function(content, options) {
		var anchor = this.options.icon.options.popupAnchor || new L.Point(0, 0);
		if (options && options.offset) {
			anchor = anchor.add(options.offset);
		}
		options = L.Util.extend({
			offset: anchor
		}, options);
		if (!this._popup) {
			this.on('click', this.openPopup, this);
		}
		this._popup = new S.Popup(options, this).setContent(content);
		return this;
	},
	unbindPopup: function() {
		if (this._popup) {
			this._popup = null;
			this.off('click', this.openPopup);
		}
		return this;
	}
});


/*********************************************** 
     Begin ramble.js 
***********************************************/ 

"use strict";
/**
 * An instance for a Ramble Video
 * Example:   
 *     var ramble = new S.Ramble(new L.Map(...), "UNIQUE_ID");
 *     
 * @param {L.Map} 	map      The L.Map to draw the S.Ramble on.
 * @param {String} 	rambleID The unique token of the ramble video to request from the server.
 * @param {Object} 	opts     An object of miscellaneous options to initialize the S.Ramble with.
 * 
 * @constructor
 * Creates a new instance of a S.Ramble
 */
S.Ramble = function(map, rambleID, opts) {
	/**
	 * @event constructed
	 * Fired when a new S.Ramble is initialized
	 */
	this.fireEvent("constructed", {
		map: map,
		id: rambleID
	});
	this._listeners = {};
	if (!map) {
		this._error("Map parameter cannot be undefined.");
	}
	if (!rambleID) {
		this._error("rambleID parameter cannot be undefined.");
	}
	this.id = rambleID;
	this._options = opts;
	this.map = map;
	this.MAP_WIDTH = map.getSize().x;
	this.MAP_HEIGHT = map.getSize().y;
	this._options = opts || {};
	this.videoLoaded = false;
	this.currentPoint = 0;
	this.title = "";
	this.latitude = 0;
	this.longitude = 0;
	this.heading = 0;
	this.points = [];
	this.description = "";
	this.token = "";
	this.createdAt = null;
	this.uploadedAt = null;
	this.type = null;
	this.video = null;
	this.photo = null;
	this.start = null;
	this.marker = null;
	this.route = null;
	// Talk to the Server to Retrieve Geo-Data
	this._pull();
};
S.Ramble.prototype._pull = function() {
	/**
	 * @event geodatapull
	 * Fired when a S.Ramble starts to pull geodata from the server.
	 */
	this.fireEvent("geodatapull");

	// $.ajax({
	// 	url: S.Config.MEDIA_URL + "/" + this.id + "/" + this.id + ".js",
	// 	context: this,
	// 	dataType: "jsonp"
	// }).done(function(response){
	// 	this._processResponse(S.currentResponse);
	// });
	S.currentRamble=this;
	var myscript = document.createElement('script');
	myscript.setAttribute('src', S.Config.MEDIA_URL + "/" + this.id + "/" + this.id + ".js");
	document.body.appendChild(myscript);
	// S.currentRamble._processResponse(S.currentResponse);
};
S.Ramble.prototype._processResponse = function(response) {
	var r = this;
	//response = response.response;
	r.title = response.title;
	r.latitude = parseFloat(response.coords[0]);
	r.longitude = parseFloat(response.coords[1]);
	r.heading = parseFloat(response.heading);
	r.points = response.points;
	r.description = response.description;
	r.token = response.token;
	r.createdAt = response.created_at;
	r.uploadedAt = response.uploaded_at;
	r.type = response.media_type;
	r.start = new L.LatLng(r.latitude, r.longitude);
	r._latLngs = S.Util.pointsToLatLngs(r.points);
	r.marker = new S.Marker(r.start);
	r.marker.setIconAngle(Math.round((r.heading)));
	if (r._latLngs.length > 1) {
		r.polyline = new L.Polyline(r._latLngs, {
			color: "#DB6C4D"
		});
	}
	r.show();
	if (r.type == "video") {
		r._initializeVideoPopup();
		r.video.addEventListener('timeupdate', function() {
			r._updateMap();
			/**
			 * @event timeupdate
			 * Fired when the video changes its time.
			 */
			r.fireEvent("timeupdate");
		});
		r.video.addEventListener("ended", function() {
			r.reset();
			/**
			 * @event ended
			 * Fired when the video ends.
			 */
			r.fireEvent("ended");
		});
		r.video.addEventListener("seeking", function() {
			r._syncVideo();
			/**
			 * @event seeking
			 * Fired when seeking for a position in the video.
			 */
			r.fireEvent("seeking");
		});
		r.video.addEventListener("seeked", function() {
			r._syncVideo();
			/**
			 * @event seeked
			 * Fired when a position has been seeked to in the video.
			 */
			r.fireEvent("seeked");
		});
		r.video.addEventListener("play", function() {
			/**
			 * @event play
			 * Fired the video starts playing.
			 */
			r.fireEvent("play");
		});
		r.video.addEventListener("pause", function() {
			/**
			 * @event pause
			 * Fired when the video is paused.
			 */
			r.fireEvent("pause");
		});
	} else if (r.type == "image") {
		r._initializePhotoPopup();
	}
	/**
	 * @event geodatapulled
	 * Fired when the geodata has been pulled and processed successfully from the server.
	 */
	r.fireEvent('geodatapulled');
}
/**
 * @method show
 * Shows the S.Ramble on the map.
 */
S.Ramble.prototype.show = function() {
	if (this.polyline) this.map.addLayer(this.polyline);
	this.map.addLayer(this.marker);
};
/**
 * @method hide
 * Hides the S.Ramble on the map.
 */
S.Ramble.prototype.hide = function() {
	if (this.polyline) this.map.removeLayer(this.polyline);
	this.map.removeLayer(this.marker);
};
S.Ramble.prototype._initializeVideoPopup = function() {
	if (this.type == "video") {
		var container = document.createElement('div');
		var videoTitle = document.createElement('div');
		videoTitle.setAttribute('class', 'video-popup-title');
		videoTitle.innerHTML = this.title;
		this.video = S.Util.createVideo(this.token);
		this.video.style.width = (this.MAP_WIDTH/4)+"px";
		container.appendChild(videoTitle);
		container.appendChild(this.video);
		this.marker.bindPopup(container);
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
S.Ramble.prototype._initializePhotoPopup = function() {
	if(this.type == "image") {
		var container = document.createElement('div');
		var photoTitle = document.createElement('div');
		photoTitle.setAttribute('class', 'photo-popup-title');
		photoTitle.innerHTML = this.title;
		this.photo = S.Util.createPhoto(this.token);
		this.photo.style.width = (this.MAP_WIDTH/4)+"px";
		container.appendChild(photoTitle);
		container.appendChild(this.photo);
		this.marker.bindPopup(container);		
	} else this._error(S.Util.ERROR_NOT_PHOTO);
}
S.Ramble.prototype._updateMap = function() {
	if (this.type == "video" && this.points) {
		var pointTime;
		var cTime = this.video.currentTime;
		if (cTime > this.video.duration) { // If video is done.
			this._error('wtf');
			this.currentPoint = 0;
		} else {
			if (this.currentPoint >= this.points.length) {
				this.currentPoint = this.points.length - 1;
			}
			pointTime = this.points[this.currentPoint].timestamp;
			while (cTime > pointTime && this.currentPoint < this.points.length - 1) {
				this.currentPoint++;
				pointTime = this.points[this.currentPoint].timestamp;
			}
			this._setCurrentPoint(this.currentPoint);
		}
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
/**
 * @method _syncVideo
 * Synchronizes the marker with current video time.
 */
S.Ramble.prototype._syncVideo = function() {
	if (this.video) {
		this._getPointByTime(this.video.currentTime);
		this._setCurrentPoint(this.currentPoint);
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
/**
 * @method reset
 * Sets the video to its initial state.
 */
S.Ramble.prototype.reset = function() {
	if (this.video) {
		this.setTime(0);
		/**
		 * @event reset
		 * Fired when the video playback is reset to zero.
		 */
		this.fireEvent("reset");
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
S.Ramble.prototype._getPointByTime = function(timestamp, head, tail) {
	head = head || 0;
	tail = tail || this.points.length;
	var midpoint = parseInt((tail + head) / 2, 10);
	var length = tail - head;
	if (length <= 1 || timestamp == this.points[midpoint].timestamp) {
		this.currentPoint = midpoint;
	} else if (timestamp > this.points[midpoint].timestamp) {
		this._getPointByTime(timestamp, midpoint, tail);
	} else if (timestamp < this.points[midpoint].timestamp) {
		this._getPointByTime(timestamp, head, midpoint);
	}
};
S.Ramble.prototype._setCurrentPoint = function(currentPoint) {
	if (this.video && this.marker) {
		this.currentPoint = currentPoint;
		var currentAngle = this.marker.getIconAngle();
		var nextAngle = Math.round(this.points[this.currentPoint].heading);
		var delta = (nextAngle - currentAngle);
		if (delta > 180) {
			delta -= 360;
		}
		this.marker.setIconAngle(currentAngle + delta);
		this.marker.setLatLng(new L.LatLng(this.points[this.currentPoint].coords[0], this.points[this.currentPoint].coords[1]));
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
S.Ramble.prototype.getTime = function() {
	if (this.video) {
		return this.video.currentTime;
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
/**
 * Sets the video time to a certain time.
 * @param {Number} newTime The number of seconds into the video to set the playback position.
 */
S.Ramble.prototype.setTime = function(newTime) {
	if (this.video) {
		if (newTime < 0 || newTime >= this.video.duration) this._error("Suggested time is out of bounds.");
		this.video.currentTime = 0;
		this._getPointByTime(newTime);
		this._setCurrentPoint(this.currentPoint);
		return this;
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
S.Ramble.prototype.getLatLng = function() {
	return this.start;
};
/**
 * Plays the video.
 */
S.Ramble.prototype.play = function() {
	if (this.video) {
		this.video.play();
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
/**
 * Pauses the video.
 */
S.Ramble.prototype.pause = function() {
	if (this.video) {
		this.video.pause();
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
/**
 * Toggles between playing and paused.
 */
S.Ramble.prototype.playPause = function() {
	if (this.video) {
		if (this.video.paused) {
			this.play();
		} else {
			this.pause();
		}
	} else this._error(S.Util.ERROR_NOT_VIDEO);
};
/**
 * Adds a specific event listener to the S.Ramble.
 * @param {String}   type    The specific event to listen for.
 * @param {Function} fn      The callback method.
 * @param {Object}   context The context for the callback method.
 */
S.Ramble.prototype.addEventListener = function(type, fn, context) {
	var events = this._events = this._events || {};
	events[type] = events[type] || [];
	events[type].push({
		action: fn,
		context: context || this
	});
	return this;
};
/**
 * Checks for a specific event listener.
 * @param  {String}  type The name of the specific event to check for.
 * @return {Boolean}      Returns true if the event was found, else false.
 */
S.Ramble.prototype.hasEventListeners = function(type) {
	var k = '_events';
	return (k in this) && (type in this[k]) && (this[k][type].length > 0);
};
/**
 * Removes a specific event listener from the S.Ramble.
 * @param  {String}   type    The name of the event.
 * @param  {Function} fn      The callback method.
 * @param  {Object}   context The scope of the callback method.
 * @return {Object}           Returns the instance of the S.Ramble that is being called.
 */
S.Ramble.prototype.removeEventListener = function(type, fn, context) {
	if (!this.hasEventListeners(type)) {
		return this;
	}
	for (var i = 0, events = this._events, len = events[type].length; i < len; i++) {
		if ((events[type][i].action === fn) && (!context || (events[type][i].context === context))) {
			events[type].splice(i, 1);
			return this;
		}
	}
	return this;
};
S.Ramble.prototype.getType = function() {
	return this.type;
};
/**
 * Method used to fire a specific event.
 * @param  {String} type Name of the event to trigger.
 * @param  {Object} data Data to pass to the callback method.
 * @return {S.Ramble}      Returns the instance of the S.Ramble that is being called.
 */
S.Ramble.prototype.fireEvent = function(type, data) {
	if (!this.hasEventListeners(type)) {
		return this;
	}
	var event = L.Util.extend({
		type: type,
		target: this
	}, data);
	var listeners = this._events[type].slice();
	for (var i = 0, len = listeners.length; i < len; i++) {
		listeners[i].action.call(listeners[i].context || this, event);
	}
	return this;
};
S.Ramble.prototype._error = function(parameter) {
	var msg = "Ramble-" + this.id + ": " + parameter;
	this.fireEvent("error", {
		"text": parameter
	});
	if (console) console.error(msg);
};

/*********************************************** 
     Begin ramblelist.js 
***********************************************/ 

"use strict";

S.RambleList = function(map, ids, options) {
	this.options = options;
	this.map = map;
	this.ids = ids;
	this.rambles = [];
	for(var x in ids) {
		this.rambles.push(new S.Ramble(map,ids[x]));
	}
}
S.RambleList.prototype.show = function() {
	for(var x in ids) {
		this.rambles[x].show();
	}
};
S.RambleList.prototype.hide = function() {
	for(var x in ids) {
		this.rambles[x].hide();
	}
};